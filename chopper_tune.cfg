[gcode_macro CHOPPER_TUNE]
description: Run vibration tests of chopper to calculate lowest magnitude driver registers v1.3
variable_verbose: True                                                                  ; Enable verbose output
variable_inset: 10                                                                      ; Offset from axis limits (mm), to determine work area limits
variable_min_req: 75                                                                    ; Set min required travel distance & DO NOT EDIT BELOW!
variable_current_change_step: 10                                                        ; Set run_current change step
variable_measure_time: 1250                                                             ; Set measure time (msec)
gcode:
    {% set current_min = params.CURRENT_MIN_MA|default('default')|string|lower %}
    {% set current_max = params.CURRENT_MAX_MA|default('default')|string|lower %}
    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(1)|int %}
    {% set toff_max = params.TOFF_MAX|default(8)|int %}
    {% set hstrt_hend_max = params.HSTRT_HEND_MAX|default(15)|int %}
    {% set min_hstrt = params.MIN_HSTRT|default(0)|int %}
    {% set max_hstrt = params.MAX_HSTRT|default(7)|int %}
    {% set min_hend = params.MIN_HEND|default(2)|int %}
    {% set max_hend = params.MAX_HEND|default(15)|int %}
    {% set min_tpfd = params.MIN_TPFD|default(0)|int %}
    {% set max_tpfd = params.MAX_TPFD|default(0)|int %}
    {% set min_speed = params.MIN_SPEED|default(100)|int %}
    {% set max_speed = params.MAX_SPEED|default(100)|int %}
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set travel_distance = params.TRAVEL_DISTANCE|default('default')|string|lower %}
    {% set accel_chip = params.ACCELEROMETER|default('default')|string|lower %}
    {% set find_vibr = params.FIND_VIBRATIONS|default('False')|string|lower %}
    {% set stepper = 'stepper_x' %}                                                     ; Default stepper for search its driver

    _detect_driver stepper={stepper}
    _chop_workflow stepper={stepper} {rawparams}

[gcode_shell_command chop_tune]
command: ~/chopper-resonance-tuner/chopper_plot.py
timeout: 999.0
verbose: True

[gcode_macro _detect_driver]
description: Find which driver is used in configuration
variable_drivers: '2130', '2208', '2209', '2660', '2240', '5160'                        ; Drivers supported by Klipper
variable_driver: 0
variable_resistor: 0
gcode:
    {% set stepper = params.STEPPER %}                                                  ; Import default stepper from CHOPPER_TUNE for search its driver
    {% for driver in drivers %}
        {% if 'run_current' in printer.configfile.settings['tmc' + driver + ' ' + stepper] %}
            {% if printer["gcode_macro CHOPPER_TUNE"].verbose %}
                {action_respond_info('Selected tmc%s for %s' % (driver, stepper))}
            {% endif %}
            SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=driver VALUE={driver}
            {% set resistor = printer.configfile.settings['tmc' + driver + ' ' + stepper].sense_resistor %}
            SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=resistor VALUE={resistor}
        {% endif %}
    {% endfor %}

[gcode_macro _chop_workflow]
description: Calculate process of CHOPPER_TUNE macro
gcode:
    {% set stepper = params.STEPPER %}                                                  ; Import default stepper from CHOPPER_TUNE for search printer.cfg registers
    {% set driver = printer["gcode_macro _detect_driver"].driver|string|lower %}        ; Import default driver from _detect_driver for search printer.cfg registers
    {% set sense_resistor = printer["gcode_macro _detect_driver"].resistor %}           ; Import sense_resistor from _detect_driver for postprocessing
    {% set current_min = params.CURRENT_MIN_MA|default('default') %}                    ; Import rawparams from CHOPPER_TUNE params
    {% set current_max = params.CURRENT_MAX_MA|default('default') %}
    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(1)|int %}
    {% set toff_max = params.TOFF_MAX|default(8)|int %}
    {% set hstrt_hend_max = params.HSTRT_HEND_MAX|default(15)|int %}
    {% set min_hstrt = params.MIN_HSTRT|default(0)|int %}
    {% set max_hstrt = params.MAX_HSTRT|default(7)|int %}
    {% set min_hend = params.MIN_HEND|default(2)|int %}
    {% set max_hend = params.MAX_HEND|default(15)|int %}
    {% set min_tpfd = params.MIN_TPFD|default(0)|int %}
    {% set max_tpfd = params.MAX_TPFD|default(0)|int %}
    {% set min_speed = params.MIN_SPEED|default(100)|int %}
    {% set max_speed = params.MAX_SPEED|default(100)|int %}
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set travel_distance = params.TRAVEL_DISTANCE|default('default')|string|lower %}
    {% set accel_chip = params.ACCELEROMETER|default('default')|string|lower %}
    {% set find_vibr = params.FIND_VIBRATIONS|default('False')|lower|string %}
    {% set trv_speed = printer.configfile.settings.printer.max_velocity / 2 * 60|int %} ; Idle movements speed
    {% set inset = printer["gcode_macro CHOPPER_TUNE"].inset %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set midY = ((printer.configfile.settings.stepper_y.position_max|float - inset) - (printer.configfile.settings.stepper_y.position_min|float + inset)) / 2 %}

    {% if driver != '5160' and driver != '2240' %}                                      ; Error TPFD on unsupported drivers
        {% if min_tpfd != 0 or max_tpfd != 0 %}
            {action_raise_error('WARNING!!! TMC%s not support register TPFD' % (driver))}
        {% endif %}
    {% endif %}

    {% if accel_chip == 'default' %}                                                    ; Auto-select accelerometer
        {% if 'accel_chip' not in printer.configfile.settings.resonance_tester %}
            {% set accel_chip = 'adxl345' %}                                            ; Default accelerometer
        {% else %}
            {% set accel_chip = printer.configfile.settings.resonance_tester.accel_chip %}
        {% endif %}
    {% endif %}
    {% if printer["gcode_macro CHOPPER_TUNE"].verbose %}
        {action_respond_info('Selected %s for accelerometer' % (accel_chip))}
    {% endif %}

    {% if 'dir_pin' in printer.configfile.settings.stepper_x1 %}                        ; Detect 2/4wd config
        {% set xy1 = 1 %}
        {% if printer["gcode_macro CHOPPER_TUNE"].verbose %}
            {action_respond_info('Selected 4wd configuration')}
        {% endif %}
    {% else %}
        {% if printer["gcode_macro CHOPPER_TUNE"].verbose %}
            {action_respond_info('Selected 2wd configuration')}
        {% endif %}
    {% endif %}

    {% if current_min == 'default' %}                                                   ; Auto-select run_current
        {% set current_min = (printer.configfile.settings['tmc' + driver + ' ' + stepper].run_current * 1000)|int %}
        {% if printer['gcode_macro CHOPPER_TUNE'].verbose %}
            {action_respond_info('Set default run_current: %f mA to run_current_min' % (current_min))}
        {% endif %}
    {% else %}
        {% set current_min = current_min|int %}
    {% endif %}
    {% if current_max == 'default' %}
        {% set current_max = (printer.configfile.settings['tmc' + driver + ' ' + stepper].run_current * 1000)|int %}
        {% if printer['gcode_macro CHOPPER_TUNE'].verbose %}
            {action_respond_info('Set default run_current: %f mA to run_current_max' % (current_max))}
        {% endif %}
    {% else %}
        {% set current_max = current_max|int %}
    {% endif %}

    {% if find_vibr == 'true' or find_vibr == '1' %}                                    ; In vibration measurement mode, search and takes registers from printer.cfg
        {% set current_max = current_min %}                                             ; and set speeds
        {% set tbl_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_tbl %}
        {% set tbl_max = tbl_min %}
        {% set toff_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_toff %}
        {% set toff_max = toff_min %}
        {% set min_hstrt = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hstrt %}
        {% set max_hstrt = min_hstrt %}
        {% set min_hend = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hend %}
        {% set max_hend = min_hend %}
        {% if min_speed == 100 and max_speed == 100 %}
            {% set min_speed = 25|int %}
            {% set max_speed = min_speed*3|int %}
        {% endif %}
    {% endif %}

    {% set acceleration = printer.configfile.settings.printer.max_accel %}              ; Calculate toolhead travel ditance from speed, acceleration and time
    {% set measure_time = printer['gcode_macro CHOPPER_TUNE'].measure_time / 1000|float %}
    {% set acceleration_distance = ((0.5 * acceleration * ((max_speed / acceleration) ** 2)) * 2) %}
    {% set auto_travel_distance  = acceleration_distance + (max_speed * measure_time) %}
    {% set min_req = printer['gcode_macro CHOPPER_TUNE'].min_req %}
    {% if printer['gcode_macro CHOPPER_TUNE'].verbose %}
        {action_respond_info('Acceleration & deceleration zone = %f mm' % (acceleration_distance))}
        {action_respond_info('Auto calculated min required travel distance = %f mm' % (auto_travel_distance))}
        {action_respond_info('Min travel distance = %f mm' % (min_req))}
    {% endif %}

    {% if min_req > (maxX - minX) %}                                                    ; Calculate travel distance
        {action_raise_error('WARNING!!! Minimal travel distance'
        ' is longer than kinematics allows')}
    {% endif %}
    {% if auto_travel_distance < min_req %}
        {% if printer['gcode_macro CHOPPER_TUNE'].verbose %}
            {action_respond_info('Auto calculated min required travel'
             ' distance lower than min travel distance, upping...')}
        {% endif %}
        {% set auto_travel_distance = min_req %}
    {% endif %}

    {% if travel_distance == 'default' %}                                               ; Protect exceeding axis limits & travel dist
        {% if minX + auto_travel_distance > maxX %}
            {action_raise_error('WARNING!!! Required travel distance is longer than'
             ' kinematics allows, please lower speed or increase acceleration')}
        {% endif %}
        {% set travel_distance = auto_travel_distance %}
    {% else %}
        {% set travel_distance = travel_distance|int %}
        {% if minX + travel_distance > maxX %}
            {% set travel_distance = maxX - minX %}
            {% if travel_distance < auto_travel_distance %}
                {action_raise_error('WARNING!!! Toolhead travel distance is less'
                 ' than it should be, please increase acceleration or lower speed')}
            {% else %}
                {action_respond_info('WARNING!!! Your travel distance is longer than kinematics allows, lowering...')}
            {% endif %}
        {% else %}
            {% if travel_distance < auto_travel_distance %}
                {% set travel_distance = auto_travel_distance %}
                {% if minX + auto_travel_distance > maxX %}
                    {action_raise_error('WARNING!!! Your travel distance is less than it should be,'
                     ' and longer than kinematics allows, please increase acceleration or lower speed')}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    {% if printer['gcode_macro CHOPPER_TUNE'].verbose %}
        {action_respond_info('Final max travel distance = %f mm, position min = %f, traveling %f --> %f' % (travel_distance, minX, minX, travel_distance + minX))}
    {% endif %}

    {% if find_vibr == 'true' or find_vibr == '1' %}                                    ; Info message
        {action_respond_info('Start find vibration mode, speeds: %f - %f mm/s, current=%f, TBL=%d, TOFF=%d,'
        ' HSTRT=%d, HEND=%d' % (min_speed, max_speed, current_min, tbl_min, toff_min, min_hstrt, min_hend))}
    {% endif %}

    {% if not 'xy' in printer.toolhead.homed_axes %}                                    ; Check for axis homing
        G28 X Y
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel}
    G0 X{minX} Y{midY} F{trv_speed}                                                     ; Move to the initial position
    RUN_SHELL_COMMAND CMD=chop_tune PARAMS='cleaner'                                    ; Clean csv files
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    G4 P5000
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    {% set current_change_step = printer['gcode_macro CHOPPER_TUNE'].current_change_step %}
    {% for t_current in range(current_min, current_max + 1, current_change_step) %}     ; Set steps of run_current
        {% set current = t_current / 1000.0 %}                                          ; Set the current value
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current}
        {% if xy1 %}
            SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={current}
            SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={current}
        {% endif %}
        {% for tbl in range(tbl_min, tbl_max + 1) %}                                    ; Set tbl values
            SET_TMC_FIELD STEPPER=stepper_x FIELD=tbl VALUE={tbl}
            SET_TMC_FIELD STEPPER=stepper_y FIELD=tbl VALUE={tbl}
            {% if xy1 %}
                SET_TMC_FIELD STEPPER=stepper_x1 FIELD=tbl VALUE={tbl}
                SET_TMC_FIELD STEPPER=stepper_y1 FIELD=tbl VALUE={tbl}
            {% endif %}
            {% for toff in range(toff_min, toff_max + 1) %}                             ; Set toff values
                SET_TMC_FIELD STEPPER=stepper_x FIELD=toff VALUE={toff}
                SET_TMC_FIELD STEPPER=stepper_y FIELD=toff VALUE={toff}
                {% if xy1 %}
                    SET_TMC_FIELD STEPPER=stepper_x1 FIELD=toff VALUE={toff}
                    SET_TMC_FIELD STEPPER=stepper_y1 FIELD=toff VALUE={toff}
                {% endif %}
                {% for hstrt_value in range(min_hstrt, max_hstrt + 1) %}
                    {% for hend_value in range(min_hend, max_hend + 1) %}
                        {% if hend_value + hstrt_value <= hstrt_hend_max %}             ; Set hend, and hstrt values
                            SET_TMC_FIELD STEPPER=stepper_x FIELD=hend VALUE={hend_value}
                            SET_TMC_FIELD STEPPER=stepper_y FIELD=hend VALUE={hend_value}
                            SET_TMC_FIELD STEPPER=stepper_x FIELD=hstrt VALUE={hstrt_value}
                            SET_TMC_FIELD STEPPER=stepper_y FIELD=hstrt VALUE={hstrt_value}
                            {% if xy1 %}
                                SET_TMC_FIELD STEPPER=stepper_x1 FIELD=hend VALUE={hend_value}
                                SET_TMC_FIELD STEPPER=stepper_y1 FIELD=hend VALUE={hend_value}
                                SET_TMC_FIELD STEPPER=stepper_x1 FIELD=hstrt VALUE={hstrt_value}
                                SET_TMC_FIELD STEPPER=stepper_y1 FIELD=hstrt VALUE={hstrt_value}
                            {% endif %}
                            {% for tpfd in range(min_tpfd, max_tpfd + 1) %}             ; Set tpfd values
                                {% if max_tpfd != 0 %}
                                    SET_TMC_FIELD STEPPER=stepper_x FIELD=tpfd VALUE={tpfd}
                                    SET_TMC_FIELD STEPPER=stepper_y FIELD=tpfd VALUE={tpfd}
                                    {% if xy1 %}
                                        SET_TMC_FIELD STEPPER=stepper_x1 FIELD=tpfd VALUE={tpfd}
                                        SET_TMC_FIELD STEPPER=stepper_y1 FIELD=tpfd VALUE={tpfd}
                                    {% endif %}
                                {% endif %}
                                DUMP_TMC STEPPER=stepper_x REGISTER=chopconf                ; Dump TMC settings
                                {% for speed in range(min_speed, max_speed + 1) %}
                                    {% set travel_distance  = (travel_distance / max_speed) * speed  %}
                                    {% for i in range(iterations) %}
                                        ACCELEROMETER_MEASURE CHIP={accel_chip}             ; Start accelerometer data collection
                                        G0 X{minX + travel_distance} F{speed*60}            ; Movement
                                        ACCELEROMETER_MEASURE CHIP={accel_chip}             ; Stop accelerometer data collection
                                        G0 X{minX} Y{midY} F{trv_speed}                     ; Move to the initial position
                                        G4 P500
                                    {% endfor %}
                                {% endfor %}
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            {% endfor %}
        {% endfor %}
    {% endfor %}
    RUN_SHELL_COMMAND CMD=chop_tune PARAMS='{'current_min_ma=%d current_max_ma=%d current_change_step=%d tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_hend_max=%d min_hstrt=%d max_hstrt=%d'
     ' min_hend=%d max_hend=%d min_tpfd=%d max_tpfd=%d min_speed=%d max_speed=%d iterations=%d accel_chip=%s driver=%s sense_resistor=%f'%(current_min|int, current_max|int, current_change_step,
        tbl_min, tbl_max, toff_min, toff_max, hstrt_hend_max, min_hstrt, max_hstrt, min_hend, max_hend, min_tpfd, max_tpfd, min_speed, max_speed, iterations, accel_chip, driver, sense_resistor)}' ; export data to processing
    M118 For manual use - RUN_SHELL_COMMAND CMD=chop_tune PARAMS='{'current_min_ma=%d current_max_ma=%d current_change_step=%d tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_hend_max=%d min_hstrt=%d'
     ' max_hstrt=%d min_hend=%d max_hend=%d min_tpfd=%d max_tpfd=%d min_speed=%d max_speed=%d iterations=%d accel_chip=%s driver=%s sense_resistor=%f'%(current_min|int, current_max|int, current_change_step,
        tbl_min, tbl_max, toff_min, toff_max, hstrt_hend_max, min_hstrt, max_hstrt, min_hend, max_hend, min_tpfd, max_tpfd, min_speed, max_speed, iterations, accel_chip, driver, sense_resistor)}' ; output data info